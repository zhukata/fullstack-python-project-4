import { mkdtemp } from 'fs/promises'
import os from 'os'
import nock from 'nock'
import path from 'path'
import pageLoader from '../src/index.js'

let tempDir

beforeAll(() => {
})

beforeEach(async () => {
  nock.cleanAll()
  tempDir = await mkdtemp(path.join(os.tmpdir(), 'page-loader-'))
})

// afterEach(() => {
//   const pending = nock.pendingMocks()
//   if (pending.length > 0) {
//     console.warn('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–ø–æ–π–º–∞–Ω–Ω—ã–µ –º–æ–∫–∏:', pending)
//   }
// })

test('–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Å—É—Ä—Å–∞ (404)', async () => {
  const testUrl = 'https://example.com/page'
  nock('https://example.com').get('/page').times(Infinity).reply(404)
  console.log('üéØ Active mocks –¥–æ –≤—ã–∑–æ–≤–∞ pageLoader:', nock.activeMocks())

  await expect(pageLoader(testUrl, tempDir)).rejects.toThrow(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${testUrl} (–∫–æ–¥ 404)`)
})

test('–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∑–∞—â–∏—â—ë–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é', async () => {
  const forbiddenPath = '/root/secret'
  const testUrl = 'https://example.com/page'
  nock('https://example.com').get('/page').times(Infinity).reply(200, '<html></html>')

  await expect(pageLoader(testUrl, forbiddenPath)).rejects.toThrow(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é`)
})
