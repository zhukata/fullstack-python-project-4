import fsp from 'fs/promises'
import { URL } from 'url'
import path from 'path'

import pathConstructor from './utils/pathConstructor.js'
import { loadHtml, downloadAssets } from './loaders.js'
import { extractAssets, rewriteAssetLinks } from './parsers.js'
import { logPath, logFlow } from './utils/logger.js'

export default (url, outputDir) => {
  const pageUrl = new URL(url)
  const dirName = pathConstructor(pageUrl, 'html').replace(/\.html$/, '_files')
  const resourcesDir = path.join(outputDir, dirName)
  const htmlFileName = pathConstructor(pageUrl, 'html')
  const htmlPath = path.join(outputDir, htmlFileName)

  logFlow('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
  return fsp.access(outputDir, fsp.constants.F_OK)
    .then(() => {
      logPath(`üìÅ Output directory –¥–æ—Å—Ç—É–ø–Ω–∞: ${outputDir}`)
      logPath(`üìÅ Resources directory: ${resourcesDir}`)
      logPath(`üìÑ HTML output file: ${htmlPath}`)
      logFlow('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...')
      return fsp.mkdir(resourcesDir, { recursive: true })
    })
    .then(() => loadHtml(url))
    .then(({ html, origin }) => {
      logFlow('‚úÖ HTML –∑–∞–≥—Ä—É–∂–µ–Ω')
      const assets = extractAssets(html, origin)
      logFlow(`üîó –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${assets.length}`)
      return downloadAssets(assets, resourcesDir, pageUrl)
        .then((assetMap) => {
          logFlow(`üíæ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${assetMap.size}`)
          const updatedHtml = rewriteAssetLinks(html, assetMap, origin)
          return fsp.writeFile(htmlPath, updatedHtml).then(() => {
            logFlow('üìù HTML —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏')
            return htmlPath
          })
        })
    })
}
